- name: "Create scripts folder"
  file:
    path: ~/scripts
    state: directory
  become: yes
  become_user: root

- name: "Create Restore Script"
  template:
    src: restore.j2
    dest: /root/scripts/restore.sh
  become: yes
  become_user: root

- name: "Status file /mnt/backup/pki"
  stat:
    path:  "/mnt/backup/pki"
  register: pki_status
  become: yes
  become_user: root

- name: "Remove folder /etc/kubernetes/pki"
  file:
    path: /etc/kubernetes/pki
    state: absent
  become: yes
  become_user: root

- name: "Create folder /etc/kubernetes/pki"
  file:
    path: /etc/kubernetes/pki/etcd
    state: directory
  become: yes
  become_user: root

- name: "Copy Resources"
  copy:
    src: "{{ item.file }}"
    dest: "{{ item.dest_folder }}"
    remote_src: true
  with_items:
    - { file: /mnt/backup/pki/ca.crt, dest_folder: /etc/kubernetes/pki }
    - { file: /mnt/backup/pki/ca.key, dest_folder: /etc/kubernetes/pki }
    - { file: /mnt/backup/pki/sa.key, dest_folder: /etc/kubernetes/pki }
    - { file: /mnt/backup/pki/front-proxy-ca.crt, dest_folder: /etc/kubernetes/pki }
    - { file: /mnt/backup/pki/sa.pub, dest_folder: /etc/kubernetes/pki }
    - { file: /mnt/backup/pki/front-proxy-ca.key, dest_folder: /etc/kubernetes/pki }
    - { file: /mnt/backup/pki/etcd/ca.crt, dest_folder: /etc/kubernetes/pki/etcd }
    - { file: /mnt/backup/pki/etcd/ca.key, dest_folder: /etc/kubernetes/pki/etcd }
  when: pki_status.stat.exists
  become: yes
  become_user: root

- name: "Create .kube folder"
  file:
    path: ~/.kube
    state: directory
  become: yes
  become_user: root

- name: "Create kubadm-config"
  template:
    src: kubeadm-config.j2
    dest: /tmp/kubeadm-config.yaml
  become: yes
  become_user: root
  when: groups["kubernetes-controlplane-lb"] is defined and (groups["kubernetes-controlplane-lb"]|length>0)

- name: "Create Config kubeadm"
  set_fact: 
    options: --config=/tmp/kubeadm-config.yaml
  when: groups["kubernetes-controlplane-lb"] is defined and (groups["kubernetes-controlplane-lb"]|length>0)

- name: "Do not create Config kubeadm"
  set_fact:
    options:
  when: not (groups["kubernetes-controlplane-lb"] is defined and (groups["kubernetes-controlplane-lb"]|length>0))

- name: "Execute kubeadm init (reuse old /etc/kubernetes/pki)"
  command: kubeadm init {{ kubeadm.init.options | default('') }} {{options}} --ignore-preflight-errors=DirAvailable--etc-kubernetes-pki
  register: kubeadm_init_message_exists
  become: yes
  become_user: root
  when: pki_status.stat.exists

- name: "Create join master fact"
  set_fact:
    join_master: '{{ kubeadm_init_message_exists.stdout_lines[-2:] | map("removeBackSlash") | join("") }}'
  become: yes
  become_user: root
  when: pki_status.stat.exists

- name: "Execute kubeadm init"
  command: kubeadm init {{ kubeadm.init.options | default('') }} {{options}}
  register: kubeadm_init_message_not_exists
  become: yes
  become_user: root
  when: not pki_status.stat.exists

- name: "Create join master fact"
  set_fact:
    join_master: '{{ kubeadm_init_message_not_exists.stdout_lines[-2:] | map("removeBackSlash") | join("") }}'
  become: yes
  become_user: root
  when: not pki_status.stat.exists

- name: "Copy admin.conf"
  copy:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    remote_src: true
  become: yes
  become_user: root

# LINT-ERROR
- name: "Get K8s version"
  shell: kubectl version | base64 | tr -d '\n'
  register: k8_version
  become: yes
  become_user: root

# LINT-ERROR
- name: "Create K8s network"
  command: kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version={{ k8_version.stdout_lines[0] }}
  become: yes
  become_user: root
